<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="Image width" type="xint" value="640"/>
<entry key="Image height" type="xint" value="640"/>
<entry key="Image resolution" type="xstring" value="NA"/>
<entry key="Image background color" type="xstring" value="#ffffff"/>
<entry key="Text point size" type="xint" value="12"/>
<config key="R settings">
<entry key="script" type="xstring" value="#library required for the interactive volcano plot%%00010library(plotly)%%00010%%00010#data input as a dataframe%%00010frame &lt;- as.data.frame(knime.in, stringsAsFactors = FALSE) %%00010%%00010frame$logFoldChange &lt;- knime.in[,1]%%00010frame$adjpvalue &lt;- knime.in[,2]%%00010%%00010# annotation columns%%00010col_number &lt;- ncol(frame)-2%%00010%%00010if (col_number == 3) {%%00010%%00009frame[,3] &lt;- as.character(frame[,3])%%00010%%00009frame[,3][is.na(frame[,3])] &lt;- &quot;none&quot;%%00010%%00009frame$annotation &lt;- frame[,3]%%00010} else {%%00010frame[,3:col_number] &lt;- lapply(frame[,3:col_number], as.character)%%00010frame[,3:col_number][is.na(frame[, 3:col_number])] &lt;- &quot;none&quot;%%00010frame$annotation &lt;- frame[,3]%%00010for (i in 4:col_number) {%%00010%%00009frame$annotation &lt;- paste(frame$annotation, frame[,i], sep = &quot; ; &quot;)%%00010}%%00010}%%00010%%00010# specific proteins to be labeled%%00010if (knime.flow.in[[&quot;spec_proteins&quot;]] == &quot;&quot;) {%%00010a &lt;- &quot; &quot;%%00010NA_proteins_count &lt;- 0%%00010} else {%%00010%%00010# gets names of specific proteins to be labeled%%00010spec_prot &lt;- trimws(strsplit(knime.flow.in[[&quot;spec_proteins&quot;]],',')[[1]])%%00010%%00010# creates empty dataframe, where user-provided hits will be%%00010sp_prot &lt;- as.data.frame(matrix(data=NA, nrow=length(spec_prot),  ncol= 3))%%00010%%00010# uses colnames of frame dataset%%00010col_logFC &lt;- grep(&quot;logFoldChange&quot;, colnames(frame))%%00010col_pval &lt;- grep(&quot;adjpvalue&quot;, colnames(frame))%%00010%%00010colnames(sp_prot) &lt;- colnames(frame)[c(col_logFC,col_pval,ncol(frame))]%%00010%%00010# grep rows where the majority proteins are and appends them to the newly created dataframe%%00010%%00010for (i in 1:length(spec_prot)) {%%00010%%00009#pom &lt;- grep(spec_prot[i], frame$annotation)%%00010%%00009pom &lt;- which(frame$annotation == spec_prot[i])%%00010%%00009sp_prot[i,] &lt;- frame[pom, c(col_logFC,col_pval,ncol(frame))]%%00010%%00009}%%00010%%00010%%00010# checking if user provided reasonable proteins to be labeled (ie they have a valid logFC and pvalue)%%00010# if they have valid logFC and pvalue, they're placed to valid_proteins dataframe%%00010# if not, they are placed to NA_proteins dataframe%%00010sp_prot$row_sums &lt;- rowSums(sp_prot[,1:2])%%00010NA_proteins &lt;- sp_prot[is.na(sp_prot$row_sums),]%%00010valid_proteins &lt;- sp_prot[!is.na(sp_prot$row_sums),]%%00010%%00010# numbers of particular cases (ie valid and NA proteins)%%00010NA_proteins_count &lt;- nrow(NA_proteins)%%00010valid_proteins_count &lt;- nrow(valid_proteins)%%00010%%00010# arrows to user specified proteins%%00010a &lt;- list()%%00010if (valid_proteins_count&gt;0){ %%00010for (i in 1:nrow(valid_proteins)) {%%00010  m &lt;- valid_proteins[i, ]%%00010  a[[i]] &lt;- list(%%00010    x = m[[&quot;logFoldChange&quot;]],%%00010    y = -log10(m[[&quot;adjpvalue&quot;]]),%%00010    text = m[[&quot;annotation&quot;]],%%00010    xref = &quot;x&quot;,%%00010    yref = &quot;y&quot;,%%00010    showarrow = TRUE,%%00010    arrowhead = 0.5,%%00010    ax = 20,%%00010    ay = -40%%00010  )%%00010}%%00010} else {%%00010%%00009showarrow = FALSE%%00010%%00009}%%00010}%%00010%%00010#NA values removal%%00010frame &lt;- na.omit(frame)%%00010%%00010#zero p value replacement%%00010frame[(frame$pvalue == 0)] &lt;- knime.flow.in[[&quot;zero_replacement&quot;]]%%00010%%00010###################################### Interactive volcano plot ##########################################%%00010%%00010# add a grouping column, default value is &quot;non-significant&quot; (ie pvalue &gt;0.05, logFC &gt;1.5)%%00010frame[&quot;group&quot;] &lt;- &quot;Non sign.&quot;%%00010%%00010# p value is significant when &lt;0.05, logFC set by default &gt;1.5%%00010# change the grouping if pvalue &lt;0.05, but logFC &lt;1.5%%00010frame[which(frame[knime.flow.in[[&quot;p_value_column&quot;]]]&lt; (knime.flow.in[[&quot;p_value_threshold&quot;]]) &amp; abs(frame[knime.flow.in[[&quot;logFC_column&quot;]]]) &lt; (knime.flow.in[[&quot;logFC_threshold&quot;]]) ), &quot;group&quot;] &lt;- &quot;Significant&quot;%%00010%%00010# change the grouping if logFC &gt;1.5, but pvalue &gt;0.05%%00010frame[which(frame[knime.flow.in[[&quot;p_value_column&quot;]]]&gt; (knime.flow.in[[&quot;p_value_threshold&quot;]]) &amp; abs(frame[knime.flow.in[[&quot;logFC_column&quot;]]]) &gt; (knime.flow.in[[&quot;logFC_threshold&quot;]]) ), &quot;group&quot;] &lt;- &quot;FoldChange&quot;%%00010%%00010# change the grouping if pvalue &lt;0.05 AND logFC &gt;1.5%%00010frame[which(frame[knime.flow.in[[&quot;p_value_column&quot;]]]&lt; (knime.flow.in[[&quot;p_value_threshold&quot;]]) &amp; abs(frame[knime.flow.in[[&quot;logFC_column&quot;]]]) &gt; (knime.flow.in[[&quot;logFC_threshold&quot;]]) ), &quot;group&quot;] &lt;- &quot;Significant&amp;FoldChange&quot;%%00010%%00010frame_ns &lt;- frame[frame$group == &quot;Non sign.&quot;,]%%00010frame_sign &lt;- frame[frame$group == &quot;Significant&quot;,]%%00010frame_fc &lt;- frame[frame$group == &quot;FoldChange&quot;,]%%00010frame_sign_fc &lt;- frame[frame$group == &quot;Significant&amp;FoldChange&quot;,]%%00010%%00010%%00010%%00010# plotting the volcano plot%%00010# first trace is only for displaying the number of cases used for the volcano plot%%00010# for each category there is a separate trace%%00010pom &lt;- knime.flow.in[[&quot;plot_save&quot;]]%%00010%%00010knime.flow.in[[&quot;plot_save&quot;]] &lt;- plot_ly(type = 'scatter', mode = 'markers') %&gt;% %%00010  add_trace(%%00010      data = frame,%%00010      x = frame$logFoldChange, %%00010      y = -log10(frame$adjpvalue),%%00010      name = ~ paste('&lt;b&gt;Number of displayed cases: &lt;/b&gt;', nrow(frame), sep=&quot;&quot;),%%00010      marker = list(%%00010        color = 'white',%%00010        size = 4,%%00010        opacity = 1%%00010      ) %%00010      ) %&gt;%%%00010   add_trace(%%00010      data = frame_ns,%%00010      x = frame_ns$logFoldChange, %%00010      y = -log10(frame_ns$adjpvalue),%%00010      text = ~ frame_ns$annotation,%%00010      name = ~ paste('Non. sign (', nrow(frame_ns), ')', sep=&quot;&quot;), %%00010      marker = list(%%00010        color = 'coral',%%00010        size = 4,%%00010        opacity = 0.6%%00010      )) %&gt;%%%00010   add_trace(%%00010      data = frame_sign,%%00010      x = frame_sign$logFoldChange, %%00010      y = -log10(frame_sign$adjpvalue),%%00010      text = ~ frame_sign$annotation,%%00010      name = ~ paste('Significant (', nrow(frame_sign), ')', sep=&quot;&quot;), %%00010      marker = list(%%00010        color = 'darkcyan',%%00010        size = 4,%%00010        opacity = 0.6%%00010      )) %&gt;%%%00010   add_trace(%%00010      data = frame_fc,%%00010      x = frame_fc$logFoldChange, %%00010      y = -log10(frame_fc$adjpvalue),%%00010      text = ~ frame_fc$annotation,%%00010      name = ~ paste('FoldChange (', nrow(frame_fc), ')', sep=&quot;&quot;), %%00010      marker = list(%%00010        color = 'blue',%%00010        size = 4,%%00010        opacity = 0.6%%00010      )) %&gt;%%%00010   add_trace(%%00010      data = frame_sign_fc,%%00010      x = frame_sign_fc$logFoldChange, %%00010      y = -log10(frame_sign_fc$adjpvalue),%%00010      text = ~ frame_sign_fc$annotation,%%00010      name = ~ paste('Significant&amp;FoldChange (', nrow(frame_sign_fc), ')', sep=&quot;&quot;), %%00010      marker = list(%%00010        color = 'red',%%00010        size = 4,%%00010        opacity = 0.6%%00010      )) %&gt;%%%00010      layout (title = knime.flow.in[[&quot;plot_title&quot;]],%%00010       xaxis = list(title=knime.flow.in[[&quot;x_axis_label&quot;]]),%%00010       yaxis = list(title=knime.flow.in[[&quot;y_axis_label&quot;]]),%%00010       annotations = a%%00010          )%%00010          %%00010if (NA_proteins_count == 0){%%00010%%00009   knime.flow.in[[&quot;plot_save&quot;]]       %%00010} else if (NA_proteins_count &gt; 0) {%%00010 add_annotations(knime.flow.in[[&quot;plot_save&quot;]],%%00010    x = 1, y = 0.01, text = ~paste('Number of cases to be labeled without logFC and pvalue: ', NA_proteins_count), %%00010      showarrow = F, xref='paper', yref='paper', %%00010      xanchor='right', yanchor='auto', xshift=0, yshift=0,%%00010      font=list(size=8, color=&quot;black&quot;))    %%00010}%%00010%%00010# plot saving%%00010# checks if user provided .html or not, if not, it will automatically append it to the name of file-to-be-saved%%00010if (grepl(&quot;.html&quot;, pom, fixed=TRUE) == TRUE) {%%00010 %%00009f1 &lt;- paste(knime.flow.in[[&quot;plot_path&quot;]],pom, sep=&quot;&quot;, collapse = NULL)%%00010} else {%%00010%%00009f &lt;- paste(pom,&quot;.html&quot;, sep=&quot;&quot;,collapse = NULL)%%00010%%00009f1 &lt;- paste(knime.flow.in[[&quot;plot_path&quot;]],f, sep=&quot;&quot;, collapse = NULL)%%00010}%%00010%%00010htmlwidgets::saveWidget(as.widget(knime.flow.in[[&quot;plot_save&quot;]]), f1, selfcontained=FALSE)%%00010%%00010############################## Static volcano plot for output ###################################%%00010frame_output &lt;- with(frame, plot(frame$logFoldChange, -log10(frame$adjpvalue), pch=20, main=&quot;Volcano plot&quot;, xlim=c(-6,8), xlab = &quot;log fold change&quot;, ylab = &quot;-log10(pvalue)&quot;))%%00010%%00010# output%%00010knime.out &lt;- frame_output%%00010"/>
<entry key="templateUUID" type="xstring" isnull="true" value=""/>
<entry key="version" type="xstring" value="version 1.x"/>
<entry key="Output non numbers (NaN, Inf, -Inf) as missing cells" type="xboolean" value="false"/>
<entry key="sendRowNames" type="xboolean" value="true"/>
<entry key="sendBatchSize" type="xint" value="10000"/>
<entry key="knimeInType" type="xstring" value="data.frame"/>
</config>
<entry key="Image type" type="xstring" value="PNG"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="IDLE"/>
<entry key="factory" type="xstring" value="org.knime.r.RViewNodeFactory"/>
<entry key="node-name" type="xstring" value="R View (Table)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME R-Project nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.r"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-bundle-version" type="xstring" value="3.7.1.v201901291055"/>
<entry key="node-feature-name" type="xstring" value="KNIME Interactive R Statistics Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.r.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
<entry key="node-feature-version" type="xstring" value="3.7.1.v201901291055"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="R View (Table)"/>
<entry key="hasContent" type="xboolean" value="false"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_dir_location" type="xstring" isnull="true" value=""/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
